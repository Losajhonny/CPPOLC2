
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.DracoScript;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class DsSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public DsSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public DsSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DsSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\005\004\000\002\006\005" +
    "\000\002\006\003\000\002\007\003\000\002\007\005\000" +
    "\002\011\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\004\000\002\010\004\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\005\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\012\003\000\002" +
    "\012\004\000\002\012\005\000\002\012\004\000\002\013" +
    "\011\000\002\014\011\000\002\016\004\000\002\016\003" +
    "\000\002\015\007\000\002\017\011\000\002\020\015\000" +
    "\002\021\003\000\002\021\003\000\002\022\006\000\002" +
    "\023\006\000\002\024\005\000\002\024\003\000\002\025" +
    "\014\000\002\026\016\000\002\027\016\000\002\030\014" +
    "\000\002\031\020" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\034\004\006\005\012\010\037\011\030\012" +
    "\004\013\017\014\021\015\032\016\011\017\036\020\025" +
    "\021\034\060\026\001\002\000\004\050\277\001\002\000" +
    "\040\002\ufffe\004\ufffe\005\ufffe\010\ufffe\011\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\053\ufffe\060\ufffe\001\002\000\004\060\270\001\002" +
    "\000\042\002\uffcf\004\uffcf\005\250\007\251\010\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\053\uffcf\060\uffcf\001\002\000\040\002" +
    "\ufffa\004\ufffa\005\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\053" +
    "\ufffa\060\ufffa\001\002\000\004\050\234\001\002\000\004" +
    "\050\226\001\002\000\004\002\225\001\002\000\004\046" +
    "\224\001\002\000\036\002\000\004\006\005\012\010\037" +
    "\011\030\012\004\013\017\014\021\015\032\016\011\017" +
    "\036\020\025\021\034\060\026\001\002\000\004\046\223" +
    "\001\002\000\004\050\220\001\002\000\040\002\ufffb\004" +
    "\ufffb\005\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\053\ufffb\060" +
    "\ufffb\001\002\000\004\050\212\001\002\000\004\046\211" +
    "\001\002\000\004\046\210\001\002\000\004\046\207\001" +
    "\002\000\004\050\176\001\002\000\004\045\174\001\002" +
    "\000\004\046\173\001\002\000\004\050\164\001\002\000" +
    "\004\046\163\001\002\000\004\050\152\001\002\000\004" +
    "\046\151\001\002\000\004\050\134\001\002\000\040\002" +
    "\ufff9\004\ufff9\005\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\053" +
    "\ufff9\060\ufff9\001\002\000\004\050\043\001\002\000\004" +
    "\046\042\001\002\000\004\046\041\001\002\000\040\002" +
    "\ufff7\004\ufff7\005\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\053" +
    "\ufff7\060\ufff7\001\002\000\040\002\ufff1\004\ufff1\005\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\053\ufff1\060\ufff1\001\002" +
    "\000\030\022\056\023\055\024\046\025\053\044\052\050" +
    "\045\054\051\055\047\056\044\057\050\060\054\001\002" +
    "\000\050\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\046\uffd5\047\uffd5\051" +
    "\uffd5\001\002\000\030\022\056\023\055\024\046\025\053" +
    "\044\052\050\045\054\051\055\047\056\044\057\050\060" +
    "\054\001\002\000\030\022\056\023\055\024\046\025\053" +
    "\044\052\050\045\054\051\055\047\056\044\057\050\060" +
    "\054\001\002\000\050\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\046\uffd2" +
    "\047\uffd2\051\uffd2\001\002\000\050\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\046\uffd4\047\uffd4\051\uffd4\001\002\000\050\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\046\uffd3\047\uffd3\051\uffd3\001\002\000" +
    "\030\022\056\023\055\024\046\025\053\044\052\050\045" +
    "\054\051\055\047\056\044\057\050\060\054\001\002\000" +
    "\030\022\056\023\055\024\046\025\053\044\052\050\045" +
    "\054\051\055\047\056\044\057\050\060\054\001\002\000" +
    "\050\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\046\uffd6\047\uffd6\051\uffd6" +
    "\001\002\000\050\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\046\uffd0\047" +
    "\uffd0\051\uffd0\001\002\000\050\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1" +
    "\046\uffd1\047\uffd1\051\uffd1\001\002\000\044\024\070\025" +
    "\076\026\064\027\066\030\075\031\063\032\073\033\072" +
    "\034\061\035\067\036\077\037\065\040\060\041\071\042" +
    "\100\043\062\047\074\001\002\000\030\022\056\023\055" +
    "\024\046\025\053\044\052\050\045\054\051\055\047\056" +
    "\044\057\050\060\054\001\002\000\030\022\056\023\055" +
    "\024\046\025\053\044\052\050\045\054\051\055\047\056" +
    "\044\057\050\060\054\001\002\000\030\022\056\023\055" +
    "\024\046\025\053\044\052\050\045\054\051\055\047\056" +
    "\044\057\050\060\054\001\002\000\030\022\056\023\055" +
    "\024\046\025\053\044\052\050\045\054\051\055\047\056" +
    "\044\057\050\060\054\001\002\000\030\022\056\023\055" +
    "\024\046\025\053\044\052\050\045\054\051\055\047\056" +
    "\044\057\050\060\054\001\002\000\030\022\056\023\055" +
    "\024\046\025\053\044\052\050\045\054\051\055\047\056" +
    "\044\057\050\060\054\001\002\000\030\022\056\023\055" +
    "\024\046\025\053\044\052\050\045\054\051\055\047\056" +
    "\044\057\050\060\054\001\002\000\030\022\056\023\055" +
    "\024\046\025\053\044\052\050\045\054\051\055\047\056" +
    "\044\057\050\060\054\001\002\000\030\022\056\023\055" +
    "\024\046\025\053\044\052\050\045\054\051\055\047\056" +
    "\044\057\050\060\054\001\002\000\030\022\056\023\055" +
    "\024\046\025\053\044\052\050\045\054\051\055\047\056" +
    "\044\057\050\060\054\001\002\000\050\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\046\uffd8\047\uffd8\051\uffd8\001\002\000\050\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\046\uffd9\047\uffd9\051\uffd9\001\002" +
    "\000\030\022\056\023\055\024\046\025\053\044\052\050" +
    "\045\054\051\055\047\056\044\057\050\060\054\001\002" +
    "\000\030\022\056\023\055\024\046\025\053\044\052\050" +
    "\045\054\051\055\047\056\044\057\050\060\054\001\002" +
    "\000\030\022\056\023\055\024\046\025\053\044\052\050" +
    "\045\054\051\055\047\056\044\057\050\060\054\001\002" +
    "\000\030\022\056\023\055\024\046\025\053\044\052\050" +
    "\045\054\051\055\047\056\044\057\050\060\054\001\002" +
    "\000\030\022\056\023\055\024\046\025\053\044\052\050" +
    "\045\054\051\055\047\056\044\057\050\060\054\001\002" +
    "\000\050\024\070\025\076\026\064\027\066\030\075\031" +
    "\063\032\073\033\072\034\061\035\067\036\077\037\065" +
    "\040\060\041\071\042\uffdc\043\uffdc\046\uffdc\047\uffdc\051" +
    "\uffdc\001\002\000\050\024\070\025\076\026\064\027\066" +
    "\030\075\031\063\032\073\033\072\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\046\uffe0" +
    "\047\uffe0\051\uffe0\001\002\000\050\024\uffe9\025\uffe9\026" +
    "\064\027\066\030\075\031\063\032\073\033\072\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\046\uffe9\047\uffe9\051\uffe9\001\002\000\050\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\075\031\uffe6\032\073\033" +
    "\072\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\046\uffe6\047\uffe6\051\uffe6\001\002\000" +
    "\044\024\070\025\076\026\064\027\066\030\075\031\063" +
    "\032\073\033\072\034\061\035\067\036\077\037\065\040" +
    "\060\041\071\042\100\043\062\047\106\001\002\000\030" +
    "\022\056\023\055\024\046\025\053\044\052\050\045\054" +
    "\051\055\047\056\044\057\050\060\054\001\002\000\044" +
    "\024\070\025\076\026\064\027\066\030\075\031\063\032" +
    "\073\033\072\034\061\035\067\036\077\037\065\040\060" +
    "\041\071\042\100\043\062\047\110\001\002\000\030\022" +
    "\056\023\055\024\046\025\053\044\052\050\045\054\051" +
    "\055\047\056\044\057\050\060\054\001\002\000\044\024" +
    "\070\025\076\026\064\027\066\030\075\031\063\032\073" +
    "\033\072\034\061\035\067\036\077\037\065\040\060\041" +
    "\071\042\100\043\062\047\112\001\002\000\030\022\056" +
    "\023\055\024\046\025\053\044\052\050\045\054\051\055" +
    "\047\056\044\057\050\060\054\001\002\000\044\024\070" +
    "\025\076\026\064\027\066\030\075\031\063\032\073\033" +
    "\072\034\061\035\067\036\077\037\065\040\060\041\071" +
    "\042\100\043\062\051\114\001\002\000\004\046\uffbc\001" +
    "\002\000\050\024\070\025\076\026\064\027\066\030\075" +
    "\031\063\032\073\033\072\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\046\uffdd\047\uffdd" +
    "\051\uffdd\001\002\000\050\024\uffea\025\uffea\026\064\027" +
    "\066\030\075\031\063\032\073\033\072\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\046" +
    "\uffea\047\uffea\051\uffea\001\002\000\050\024\070\025\076" +
    "\026\064\027\066\030\075\031\063\032\073\033\072\034" +
    "\uffe1\035\uffe1\036\077\037\065\040\060\041\071\042\uffe1" +
    "\043\uffe1\046\uffe1\047\uffe1\051\uffe1\001\002\000\050\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\075\031\uffe8\032\073" +
    "\033\072\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\046\uffe8\047\uffe8\051\uffe8\001\002" +
    "\000\050\024\070\025\076\026\064\027\066\030\075\031" +
    "\063\032\073\033\072\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\042\uffdf\043\uffdf\046\uffdf\047\uffdf\051" +
    "\uffdf\001\002\000\050\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\030\075\031\uffe7\032\073\033\072\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\046\uffe7" +
    "\047\uffe7\051\uffe7\001\002\000\050\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\075\031\uffe5\032\073\033\072\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\046\uffe5\047\uffe5\051\uffe5\001\002\000\050\024\070" +
    "\025\076\026\064\027\066\030\075\031\063\032\073\033" +
    "\072\034\061\035\067\036\077\037\065\040\060\041\071" +
    "\042\100\043\uffdb\046\uffdb\047\uffdb\051\uffdb\001\002\000" +
    "\050\024\070\025\076\026\064\027\066\030\075\031\063" +
    "\032\073\033\072\034\uffe2\035\uffe2\036\077\037\065\040" +
    "\060\041\071\042\uffe2\043\uffe2\046\uffe2\047\uffe2\051\uffe2" +
    "\001\002\000\050\024\070\025\076\026\064\027\066\030" +
    "\075\031\063\032\073\033\072\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\046\uffde\047" +
    "\uffde\051\uffde\001\002\000\050\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\075\031\uffe4\032\073\033\072\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\046\uffe4\047\uffe4\051\uffe4\001\002\000\050\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\075\031\uffda\032\073\033\072" +
    "\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042" +
    "\uffda\043\uffda\046\uffda\047\uffda\051\uffda\001\002\000\050" +
    "\024\uffe3\025\uffe3\026\064\027\066\030\075\031\063\032" +
    "\073\033\072\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\046\uffe3\047\uffe3\051\uffe3\001" +
    "\002\000\044\024\070\025\076\026\064\027\066\030\075" +
    "\031\063\032\073\033\072\034\061\035\067\036\077\037" +
    "\065\040\060\041\071\042\100\043\062\051\133\001\002" +
    "\000\050\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\043\uffd7\046\uffd7\047\uffd7\051" +
    "\uffd7\001\002\000\030\022\056\023\055\024\046\025\053" +
    "\044\052\050\045\054\051\055\047\056\044\057\050\060" +
    "\054\001\002\000\044\024\070\025\076\026\064\027\066" +
    "\030\075\031\063\032\073\033\072\034\061\035\067\036" +
    "\077\037\065\040\060\041\071\042\100\043\062\047\136" +
    "\001\002\000\030\022\056\023\055\024\046\025\053\044" +
    "\052\050\045\054\051\055\047\056\044\057\050\060\054" +
    "\001\002\000\044\024\070\025\076\026\064\027\066\030" +
    "\075\031\063\032\073\033\072\034\061\035\067\036\077" +
    "\037\065\040\060\041\071\042\100\043\062\047\140\001" +
    "\002\000\030\022\056\023\055\024\046\025\053\044\052" +
    "\050\045\054\051\055\047\056\044\057\050\060\054\001" +
    "\002\000\044\024\070\025\076\026\064\027\066\030\075" +
    "\031\063\032\073\033\072\034\061\035\067\036\077\037" +
    "\065\040\060\041\071\042\100\043\062\047\142\001\002" +
    "\000\030\022\056\023\055\024\046\025\053\044\052\050" +
    "\045\054\051\055\047\056\044\057\050\060\054\001\002" +
    "\000\044\024\070\025\076\026\064\027\066\030\075\031" +
    "\063\032\073\033\072\034\061\035\067\036\077\037\065" +
    "\040\060\041\071\042\100\043\062\047\144\001\002\000" +
    "\030\022\056\023\055\024\046\025\053\044\052\050\045" +
    "\054\051\055\047\056\044\057\050\060\054\001\002\000" +
    "\044\024\070\025\076\026\064\027\066\030\075\031\063" +
    "\032\073\033\072\034\061\035\067\036\077\037\065\040" +
    "\060\041\071\042\100\043\062\047\146\001\002\000\030" +
    "\022\056\023\055\024\046\025\053\044\052\050\045\054" +
    "\051\055\047\056\044\057\050\060\054\001\002\000\044" +
    "\024\070\025\076\026\064\027\066\030\075\031\063\032" +
    "\073\033\072\034\061\035\067\036\077\037\065\040\060" +
    "\041\071\042\100\043\062\051\150\001\002\000\004\046" +
    "\uffba\001\002\000\040\002\ufff4\004\ufff4\005\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\053\ufff4\060\ufff4\001\002\000\030" +
    "\022\056\023\055\024\046\025\053\044\052\050\045\054" +
    "\051\055\047\056\044\057\050\060\054\001\002\000\044" +
    "\024\070\025\076\026\064\027\066\030\075\031\063\032" +
    "\073\033\072\034\061\035\067\036\077\037\065\040\060" +
    "\041\071\042\100\043\062\047\154\001\002\000\030\022" +
    "\056\023\055\024\046\025\053\044\052\050\045\054\051" +
    "\055\047\056\044\057\050\060\054\001\002\000\044\024" +
    "\070\025\076\026\064\027\066\030\075\031\063\032\073" +
    "\033\072\034\061\035\067\036\077\037\065\040\060\041" +
    "\071\042\100\043\062\047\156\001\002\000\030\022\056" +
    "\023\055\024\046\025\053\044\052\050\045\054\051\055" +
    "\047\056\044\057\050\060\054\001\002\000\044\024\070" +
    "\025\076\026\064\027\066\030\075\031\063\032\073\033" +
    "\072\034\061\035\067\036\077\037\065\040\060\041\071" +
    "\042\100\043\062\047\160\001\002\000\030\022\056\023" +
    "\055\024\046\025\053\044\052\050\045\054\051\055\047" +
    "\056\044\057\050\060\054\001\002\000\044\024\070\025" +
    "\076\026\064\027\066\030\075\031\063\032\073\033\072" +
    "\034\061\035\067\036\077\037\065\040\060\041\071\042" +
    "\100\043\062\051\162\001\002\000\004\046\uffbe\001\002" +
    "\000\040\002\ufff2\004\ufff2\005\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\053\ufff2\060\ufff2\001\002\000\030\022\056\023" +
    "\055\024\046\025\053\044\052\050\045\054\051\055\047" +
    "\056\044\057\050\060\054\001\002\000\044\024\070\025" +
    "\076\026\064\027\066\030\075\031\063\032\073\033\072" +
    "\034\061\035\067\036\077\037\065\040\060\041\071\042" +
    "\100\043\062\051\166\001\002\000\004\052\167\001\002" +
    "\000\034\004\006\005\012\010\037\011\030\012\004\013" +
    "\017\014\021\015\032\016\011\017\036\020\025\021\034" +
    "\060\026\001\002\000\036\004\006\005\012\010\037\011" +
    "\030\012\004\013\017\014\021\015\032\016\011\017\036" +
    "\020\025\021\034\053\172\060\026\001\002\000\040\002" +
    "\uffff\004\uffff\005\uffff\010\uffff\011\uffff\012\uffff\013\uffff" +
    "\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\053" +
    "\uffff\060\uffff\001\002\000\040\002\uffc6\004\uffc6\005\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\053\uffc6\060\uffc6\001\002" +
    "\000\040\002\ufff8\004\ufff8\005\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\053\ufff8\060\ufff8\001\002\000\030\022\056\023" +
    "\055\024\046\025\053\044\052\050\045\054\051\055\047" +
    "\056\044\057\050\060\054\001\002\000\044\024\070\025" +
    "\076\026\064\027\066\030\075\031\063\032\073\033\072" +
    "\034\061\035\067\036\077\037\065\040\060\041\071\042" +
    "\100\043\062\046\uffeb\001\002\000\030\022\056\023\055" +
    "\024\046\025\053\044\052\050\045\054\051\055\047\056" +
    "\044\057\050\060\054\001\002\000\044\024\070\025\076" +
    "\026\064\027\066\030\075\031\063\032\073\033\072\034" +
    "\061\035\067\036\077\037\065\040\060\041\071\042\100" +
    "\043\062\047\200\001\002\000\030\022\056\023\055\024" +
    "\046\025\053\044\052\050\045\054\051\055\047\056\044" +
    "\057\050\060\054\001\002\000\044\024\070\025\076\026" +
    "\064\027\066\030\075\031\063\032\073\033\072\034\061" +
    "\035\067\036\077\037\065\040\060\041\071\042\100\043" +
    "\062\047\202\001\002\000\030\022\056\023\055\024\046" +
    "\025\053\044\052\050\045\054\051\055\047\056\044\057" +
    "\050\060\054\001\002\000\044\024\070\025\076\026\064" +
    "\027\066\030\075\031\063\032\073\033\072\034\061\035" +
    "\067\036\077\037\065\040\060\041\071\042\100\043\062" +
    "\047\204\001\002\000\030\022\056\023\055\024\046\025" +
    "\053\044\052\050\045\054\051\055\047\056\044\057\050" +
    "\060\054\001\002\000\044\024\070\025\076\026\064\027" +
    "\066\030\075\031\063\032\073\033\072\034\061\035\067" +
    "\036\077\037\065\040\060\041\071\042\100\043\062\051" +
    "\206\001\002\000\004\046\uffbb\001\002\000\040\002\ufffc" +
    "\004\ufffc\005\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\053\ufffc" +
    "\060\ufffc\001\002\000\040\002\ufff3\004\ufff3\005\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\053\ufff3\060\ufff3\001\002\000" +
    "\040\002\ufff5\004\ufff5\005\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\053\ufff5\060\ufff5\001\002\000\004\061\214\001\002" +
    "\000\006\047\216\051\215\001\002\000\006\047\uffbf\051" +
    "\uffbf\001\002\000\004\046\uffc1\001\002\000\004\061\217" +
    "\001\002\000\006\047\uffc0\051\uffc0\001\002\000\030\022" +
    "\056\023\055\024\046\025\053\044\052\050\045\054\051" +
    "\055\047\056\044\057\050\060\054\001\002\000\044\024" +
    "\070\025\076\026\064\027\066\030\075\031\063\032\073" +
    "\033\072\034\061\035\067\036\077\037\065\040\060\041" +
    "\071\042\100\043\062\051\222\001\002\000\004\046\uffc2" +
    "\001\002\000\040\002\ufff6\004\ufff6\005\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\053\ufff6\060\ufff6\001\002\000\040\002" +
    "\ufffd\004\ufffd\005\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\053" +
    "\ufffd\060\ufffd\001\002\000\004\002\001\001\002\000\030" +
    "\022\056\023\055\024\046\025\053\044\052\050\045\054" +
    "\051\055\047\056\044\057\050\060\054\001\002\000\044" +
    "\024\070\025\076\026\064\027\066\030\075\031\063\032" +
    "\073\033\072\034\061\035\067\036\077\037\065\040\060" +
    "\041\071\042\100\043\062\051\230\001\002\000\004\052" +
    "\231\001\002\000\034\004\006\005\012\010\037\011\030" +
    "\012\004\013\017\014\021\015\032\016\011\017\036\020" +
    "\025\021\034\060\026\001\002\000\036\004\006\005\012" +
    "\010\037\011\030\012\004\013\017\014\021\015\032\016" +
    "\011\017\036\020\025\021\034\053\233\060\026\001\002" +
    "\000\042\002\uffcb\004\uffcb\005\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\053\uffcb\060\uffcb\001\002\000\030\022" +
    "\056\023\055\024\046\025\053\044\052\050\045\054\051" +
    "\055\047\056\044\057\050\060\054\001\002\000\044\024" +
    "\070\025\076\026\064\027\066\030\075\031\063\032\073" +
    "\033\072\034\061\035\067\036\077\037\065\040\060\041" +
    "\071\042\100\043\062\047\236\001\002\000\030\022\056" +
    "\023\055\024\046\025\053\044\052\050\045\054\051\055" +
    "\047\056\044\057\050\060\054\001\002\000\044\024\070" +
    "\025\076\026\064\027\066\030\075\031\063\032\073\033" +
    "\072\034\061\035\067\036\077\037\065\040\060\041\071" +
    "\042\100\043\062\047\240\001\002\000\030\022\056\023" +
    "\055\024\046\025\053\044\052\050\045\054\051\055\047" +
    "\056\044\057\050\060\054\001\002\000\044\024\070\025" +
    "\076\026\064\027\066\030\075\031\063\032\073\033\072" +
    "\034\061\035\067\036\077\037\065\040\060\041\071\042" +
    "\100\043\062\047\242\001\002\000\030\022\056\023\055" +
    "\024\046\025\053\044\052\050\045\054\051\055\047\056" +
    "\044\057\050\060\054\001\002\000\044\024\070\025\076" +
    "\026\064\027\066\030\075\031\063\032\073\033\072\034" +
    "\061\035\067\036\077\037\065\040\060\041\071\042\100" +
    "\043\062\047\244\001\002\000\030\022\056\023\055\024" +
    "\046\025\053\044\052\050\045\054\051\055\047\056\044" +
    "\057\050\060\054\001\002\000\044\024\070\025\076\026" +
    "\064\027\066\030\075\031\063\032\073\033\072\034\061" +
    "\035\067\036\077\037\065\040\060\041\071\042\100\043" +
    "\062\051\246\001\002\000\004\046\uffbd\001\002\000\040" +
    "\002\uffcc\004\uffcc\005\uffcc\010\uffcc\011\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\053\uffcc\060\uffcc\001\002\000\004\006\264\001\002\000" +
    "\004\050\256\001\002\000\042\002\uffce\004\uffce\005\250" +
    "\007\251\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\053\uffce\060\uffce" +
    "\001\002\000\042\002\uffc8\004\uffc8\005\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\053\uffc8\060\uffc8\001\002\000" +
    "\040\002\uffcd\004\uffcd\005\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\053\uffcd\060\uffcd\001\002\000\042\002\uffc9\004\uffc9" +
    "\005\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\053\uffc9" +
    "\060\uffc9\001\002\000\030\022\056\023\055\024\046\025" +
    "\053\044\052\050\045\054\051\055\047\056\044\057\050" +
    "\060\054\001\002\000\044\024\070\025\076\026\064\027" +
    "\066\030\075\031\063\032\073\033\072\034\061\035\067" +
    "\036\077\037\065\040\060\041\071\042\100\043\062\051" +
    "\260\001\002\000\004\052\261\001\002\000\034\004\006" +
    "\005\012\010\037\011\030\012\004\013\017\014\021\015" +
    "\032\016\011\017\036\020\025\021\034\060\026\001\002" +
    "\000\036\004\006\005\012\010\037\011\030\012\004\013" +
    "\017\014\021\015\032\016\011\017\036\020\025\021\034" +
    "\053\263\060\026\001\002\000\042\002\uffca\004\uffca\005" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\053\uffca\060" +
    "\uffca\001\002\000\004\052\265\001\002\000\034\004\006" +
    "\005\012\010\037\011\030\012\004\013\017\014\021\015" +
    "\032\016\011\017\036\020\025\021\034\060\026\001\002" +
    "\000\036\004\006\005\012\010\037\011\030\012\004\013" +
    "\017\014\021\015\032\016\011\017\036\020\025\021\034" +
    "\053\267\060\026\001\002\000\040\002\uffc7\004\uffc7\005" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\053\uffc7\060\uffc7\001" +
    "\002\000\010\045\275\046\uffed\047\uffed\001\002\000\006" +
    "\046\ufff0\047\273\001\002\000\006\046\uffee\047\uffee\001" +
    "\002\000\004\060\270\001\002\000\006\046\uffef\047\uffef" +
    "\001\002\000\030\022\056\023\055\024\046\025\053\044" +
    "\052\050\045\054\051\055\047\056\044\057\050\060\054" +
    "\001\002\000\046\024\070\025\076\026\064\027\066\030" +
    "\075\031\063\032\073\033\072\034\061\035\067\036\077" +
    "\037\065\040\060\041\071\042\100\043\062\046\uffec\047" +
    "\uffec\001\002\000\006\004\006\060\026\001\002\000\004" +
    "\046\303\001\002\000\004\046\uffc4\001\002\000\004\046" +
    "\uffc3\001\002\000\030\022\056\023\055\024\046\025\053" +
    "\044\052\050\045\054\051\055\047\056\044\057\050\060" +
    "\054\001\002\000\044\024\070\025\076\026\064\027\066" +
    "\030\075\031\063\032\073\033\072\034\061\035\067\036" +
    "\077\037\065\040\060\041\071\042\100\043\062\046\305" +
    "\001\002\000\030\022\056\023\055\024\046\025\053\044" +
    "\052\050\045\054\051\055\047\056\044\057\050\060\054" +
    "\001\002\000\044\024\070\025\076\026\064\027\066\030" +
    "\075\031\063\032\073\033\072\034\061\035\067\036\077" +
    "\037\065\040\060\041\071\042\100\043\062\051\307\001" +
    "\002\000\004\052\310\001\002\000\034\004\006\005\012" +
    "\010\037\011\030\012\004\013\017\014\021\015\032\016" +
    "\011\017\036\020\025\021\034\060\026\001\002\000\036" +
    "\004\006\005\012\010\037\011\030\012\004\013\017\014" +
    "\021\015\032\016\011\017\036\020\025\021\034\053\312" +
    "\060\026\001\002\000\040\002\uffc5\004\uffc5\005\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\053\uffc5\060\uffc5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\042\002\012\003\014\004\004\005\013\011" +
    "\023\012\017\013\006\017\007\020\034\022\026\023\037" +
    "\025\015\026\021\027\032\030\022\031\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\270\007\271" +
    "\001\001\000\010\014\252\015\246\016\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\170\005\013\011" +
    "\023\012\017\013\006\017\007\020\034\022\026\023\037" +
    "\025\015\026\021\027\032\030\022\031\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\056\001\001\000\002" +
    "\001\001\000\004\010\131\001\001\000\004\010\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\127\001\001\000\004\010\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\125\001\001\000\004\010\124\001" +
    "\001\000\004\010\123\001\001\000\004\010\122\001\001" +
    "\000\004\010\121\001\001\000\004\010\120\001\001\000" +
    "\004\010\117\001\001\000\004\010\116\001\001\000\004" +
    "\010\115\001\001\000\004\010\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\104\001\001\000\004" +
    "\010\103\001\001\000\004\010\102\001\001\000\004\010" +
    "\101\001\001\000\004\010\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\106\001\001\000\002\001\001" +
    "\000\004\010\110\001\001\000\002\001\001\000\004\010" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\134\001\001\000" +
    "\002\001\001\000\004\010\136\001\001\000\002\001\001" +
    "\000\004\010\140\001\001\000\002\001\001\000\004\010" +
    "\142\001\001\000\002\001\001\000\004\010\144\001\001" +
    "\000\002\001\001\000\004\010\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\152" +
    "\001\001\000\002\001\001\000\004\010\154\001\001\000" +
    "\002\001\001\000\004\010\156\001\001\000\002\001\001" +
    "\000\004\010\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\167\004\004\005" +
    "\013\011\023\012\017\013\006\017\007\020\034\022\026" +
    "\023\037\025\015\026\021\027\032\030\022\031\030\001" +
    "\001\000\036\004\170\005\013\011\023\012\017\013\006" +
    "\017\007\020\034\022\026\023\037\025\015\026\021\027" +
    "\032\030\022\031\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\174\001\001\000" +
    "\002\001\001\000\004\010\176\001\001\000\002\001\001" +
    "\000\004\010\200\001\001\000\002\001\001\000\004\010" +
    "\202\001\001\000\002\001\001\000\004\010\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\231\004" +
    "\004\005\013\011\023\012\017\013\006\017\007\020\034" +
    "\022\026\023\037\025\015\026\021\027\032\030\022\031" +
    "\030\001\001\000\036\004\170\005\013\011\023\012\017" +
    "\013\006\017\007\020\034\022\026\023\037\025\015\026" +
    "\021\027\032\030\022\031\030\001\001\000\002\001\001" +
    "\000\004\010\234\001\001\000\002\001\001\000\004\010" +
    "\236\001\001\000\002\001\001\000\004\010\240\001\001" +
    "\000\002\001\001\000\004\010\242\001\001\000\002\001" +
    "\001\000\004\010\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\254\015\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\261" +
    "\004\004\005\013\011\023\012\017\013\006\017\007\020" +
    "\034\022\026\023\037\025\015\026\021\027\032\030\022" +
    "\031\030\001\001\000\036\004\170\005\013\011\023\012" +
    "\017\013\006\017\007\020\034\022\026\023\037\025\015" +
    "\026\021\027\032\030\022\031\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\265\004\004\005\013" +
    "\011\023\012\017\013\006\017\007\020\034\022\026\023" +
    "\037\025\015\026\021\027\032\030\022\031\030\001\001" +
    "\000\036\004\170\005\013\011\023\012\017\013\006\017" +
    "\007\020\034\022\026\023\037\025\015\026\021\027\032" +
    "\030\022\031\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\273" +
    "\001\001\000\002\001\001\000\004\010\275\001\001\000" +
    "\002\001\001\000\010\005\300\011\301\021\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\303\001\001\000\002\001\001\000\004\010\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\310\004\004\005\013\011\023\012\017\013\006\017\007" +
    "\020\034\022\026\023\037\025\015\026\021\027\032\030" +
    "\022\031\030\001\001\000\036\004\170\005\013\011\023" +
    "\012\017\013\006\017\007\020\034\022\026\023\037\025" +
    "\015\026\021\027\032\030\022\031\030\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DsSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DsSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DsSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$DsSintactico$actions {
  private final DsSintactico parser;

  /** Constructor */
  CUP$DsSintactico$actions(DsSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$DsSintactico$do_action_part00000000(
    int                        CUP$DsSintactico$act_num,
    java_cup.runtime.lr_parser CUP$DsSintactico$parser,
    java.util.Stack            CUP$DsSintactico$stack,
    int                        CUP$DsSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DsSintactico$result;

      /* select the action based on the action number */
      switch (CUP$DsSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)).value;
		RESULT = start_val;
              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DsSintactico$parser.done_parsing();
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION tk_ptcoma 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION tk_ptcoma 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= IF 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= WHILE 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= FOR 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= PRINT tk_ptcoma 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= RUNMULTDASM tk_ptcoma 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= POINT tk_ptcoma 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= QUADRATE tk_ptcoma 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= OVAL tk_ptcoma 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= STRING tk_ptcoma 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= LINE tk_ptcoma 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= pr_smash tk_ptcoma 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= pr_var LISTA_VARIABLE 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_VARIABLE ::= LISTA_VARIABLE tk_coma VARIABLE 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLE",4, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_VARIABLE ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLE",4, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VARIABLE ::= tk_id 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARIABLE ::= tk_id tk_igual EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE",5, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACION ::= tk_id tk_igual EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= EXPRESION tk_mas EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= EXPRESION tk_menos EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= EXPRESION tk_por EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= EXPRESION tk_division EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= EXPRESION tk_potencia EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= EXPRESION tk_modulo EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= tk_menos EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= tk_mas EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION tk_igualop EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION tk_diferente EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION tk_menor EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION tk_mayor EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION tk_menorigual EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION tk_mayorigual EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION tk_and EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION tk_or EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= tk_not EXPRESION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION tk_adicion 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION tk_sustraccion 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= tk_parizq EXPRESION tk_parder 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= tk_id 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= tk_entero 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= tk_decimal 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= tk_cadena 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= tk_caracter 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= pr_true 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= pr_false 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IF ::= INS_IF 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IF ::= INS_IF VARIOS_ELIF 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF ::= INS_IF VARIOS_ELIF IFNOT 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= INS_IF IFNOT 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("IF",8, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INS_IF ::= pr_if tk_parizq EXPRESION tk_parder tk_llaizq INSTRUCCIONES tk_llader 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("INS_IF",9, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELIF ::= pr_elif tk_parizq EXPRESION tk_parder tk_llaizq INSTRUCCIONES tk_llader 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("ELIF",10, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VARIOS_ELIF ::= VARIOS_ELIF ELIF 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("VARIOS_ELIF",12, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VARIOS_ELIF ::= ELIF 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("VARIOS_ELIF",12, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IFNOT ::= pr_if pr_not tk_llaizq INSTRUCCIONES tk_llader 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("IFNOT",11, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WHILE ::= pr_while tk_parizq EXPRESION tk_parder tk_llaizq INSTRUCCIONES tk_llader 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FOR ::= pr_for tk_parizq VARIABLE_CONTROL tk_ptcoma EXPRESION tk_ptcoma EXPRESION tk_parder tk_llaizq INSTRUCCIONES tk_llader 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("FOR",14, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VARIABLE_CONTROL ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_CONTROL",15, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VARIABLE_CONTROL ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_CONTROL",15, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PRINT ::= pr_print tk_parizq EXPRESION tk_parder 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("PRINT",16, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RUNMULTDASM ::= pr_runmultdasm tk_parizq LISTA_ARCHIVO tk_parder 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("RUNMULTDASM",17, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LISTA_ARCHIVO ::= LISTA_ARCHIVO tk_coma tk_archivo 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ARCHIVO",18, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LISTA_ARCHIVO ::= tk_archivo 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_ARCHIVO",18, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // POINT ::= pr_point tk_parizq EXPRESION tk_coma EXPRESION tk_coma EXPRESION tk_coma EXPRESION tk_parder 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("POINT",19, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // QUADRATE ::= pr_quadrate tk_parizq EXPRESION tk_coma EXPRESION tk_coma EXPRESION tk_coma EXPRESION tk_coma EXPRESION tk_parder 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("QUADRATE",20, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OVAL ::= pr_oval tk_parizq EXPRESION tk_coma EXPRESION tk_coma EXPRESION tk_coma EXPRESION tk_coma EXPRESION tk_parder 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("OVAL",21, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-11)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // STRING ::= pr_string tk_parizq EXPRESION tk_coma EXPRESION tk_coma EXPRESION tk_coma EXPRESION tk_parder 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("STRING",22, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LINE ::= pr_line tk_parizq EXPRESION tk_coma EXPRESION tk_coma EXPRESION tk_coma EXPRESION tk_coma EXPRESION tk_coma EXPRESION tk_parder 
            {
              Object RESULT =null;

              CUP$DsSintactico$result = parser.getSymbolFactory().newSymbol("LINE",23, ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.elementAt(CUP$DsSintactico$top-13)), ((java_cup.runtime.Symbol)CUP$DsSintactico$stack.peek()), RESULT);
            }
          return CUP$DsSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$DsSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$DsSintactico$do_action(
    int                        CUP$DsSintactico$act_num,
    java_cup.runtime.lr_parser CUP$DsSintactico$parser,
    java.util.Stack            CUP$DsSintactico$stack,
    int                        CUP$DsSintactico$top)
    throws java.lang.Exception
    {
              return CUP$DsSintactico$do_action_part00000000(
                               CUP$DsSintactico$act_num,
                               CUP$DsSintactico$parser,
                               CUP$DsSintactico$stack,
                               CUP$DsSintactico$top);
    }
}

}
